syntax = "proto3";

package aggregator_proto;

import "google/protobuf/empty.proto";

import "api/groth16_messages.proto";
import "api/pghr13_messages.proto";
import "api/util.proto";

service Aggregator {
    // Fetch the verification key from the aggregator service to be able to verify the proofs
    // on-chain (instantiate the verifier contract)
    //
    // This verification key corresponds to the aggregator statement (this statement
    // is basically multiple calls to the SNARK verification routine)
    rpc GetVerificationKey(google.protobuf.Empty) returns (VerificationKey) {}

    // Registering an application allows to support a new
    // application on the aggregation service
    //
    // Not sure we want to have an endpoint for this in the long run, but that's
    // helpful for now, so let's keep it.
    rpc RegisterApplication(ApplicationRegistration) returns (google.protobuf.Empty) {}

    // Request a proof that verifies a batch of proofs for the given application name.
    // The only argument of this function is the application for which we want to generate
    // an aggregate proof. The proofs to batch should have already been deposited in the
    // aggregator tx pool, so they don't need to be passed as arguments here.
    // The function returns the proof of CI for the validity of the batch of proofs
    //
    // This endpoint won't necessarily be useful in practice, but this is useful
    // for some manual triggering for now.
    rpc GenerateAggregateProof(ApplicationName) returns (ExtendedProof) {}

    // Function to submit a transaction to aggregate
    rpc SubmitTransaction(TransactionToAggregate) returns (google.protobuf.Empty) {}
}

message VerificationKey {
    oneof VK {
        VerificationKeyPGHR13 pghr13_verification_key = 1;
        VerificationKeyGROTH16 groth16_verification_key = 2;
    }
}

message ExtendedProof {
    oneof EP {
        ExtendedProofPGHR13 pghr13_extended_proof = 1;
        ExtendedProofGROTH16 groth16_extended_proof = 2;
    }
}

message ApplicationName {
    string name = 1;
}

message ApplicationRegistration {
    string name = 1;
    VerificationKey vk = 2;
}

// A Zeth transaction is a "TransactionToAggregate"
// where `application_name` is set to "zeth" (the application name/ID of zeth)
message TransactionToAggregate {
    // Using the application name avoids to pass the verification key.
    // This is more bandwidth efficient.
    string application_name = 1;
    ExtendedProof extended_proof = 2;
    // Only if an incentive structure is in place and fees are supported
    int32 fee_in_wei = 3;
}