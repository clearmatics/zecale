syntax = "proto3";

package zecale_proto;

import "google/protobuf/empty.proto";

import "zeth/api/snark_messages.proto";

service Aggregator {
    // Fetch the verification key corresponding to the aggregator statement
    // (the statement including multiple calls to the SNARK verification
    // routine). The Zecale verifier contract must be instantiated with this
    // key in order to verify batches on-chain.
    rpc GetVerificationKey(google.protobuf.Empty) returns (zeth_proto.VerificationKey) {}

    // Compute the hash of a nested verification key. The server exposes this
    // since it depends on the encoding of the nested key used in the
    // aggregator circuit, and therefore may not be trivial for a given client.
    // Returns the hex-encoded key hash.
    rpc GetNestedVerificationKeyHash(zeth_proto.VerificationKey) returns (VerificationKeyHash) {}

    // Register a new application. That is, an application name and a
    // corresponding verfication key. After registration, transactions for the
    // app can be submitted. Returns the hex-encoded verification key hash.
    rpc RegisterApplication(ApplicationDescription) returns (VerificationKeyHash) {}

    // Submit a transaction to be added to a pool for later aggregation.
    rpc SubmitNestedTransaction(NestedTransaction) returns (google.protobuf.Empty) {}

    // Request a proof and inputs for a batch of nested proofs, for the
    // application of the given name.
    //
    // (The only argument of this function is the name of the application for
    // which we want to generate an aggregate proof. The proofs to batch should
    // have already been deposited in the aggregator tx pool. Returns the proof
    // of CI for the validity of the batch of proofs.)
    rpc GenerateAggregatedTransaction(AggregatedTransactionRequest) returns (AggregatedTransaction) {}
}

message VerificationKeyHash {
    string hash = 1;
}

message ApplicationDescription {
    string application_name = 1;
    zeth_proto.VerificationKey vk = 2;
}

// A transaction for a specific application (determined by `application_name`),
// to be later aggregated into a batch.
message NestedTransaction {
    string application_name = 1;
    zeth_proto.ExtendedProof extended_proof = 2;
    // Only if an incentive structure is in place and fees are supported
    int32 fee_in_wei = 3;
}

// A request for an aggregated transaction.  Specifies the application name.
message AggregatedTransactionRequest {
    string application_name = 1;
}

// Server returns this in response for a request for an aggreagted transaction.
//
// TODO: For now this includes only a proof, but eventually we may need extra
// parameter data.
message AggregatedTransaction {
    zeth_proto.ExtendedProof extended_proof = 1;
}