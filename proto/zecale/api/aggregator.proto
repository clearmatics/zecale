syntax = "proto3";

package zecale_proto;

import "google/protobuf/empty.proto";

import "zeth/api/snark_messages.proto";

service Aggregator {
    // Fetch the verification key corresponding to the aggregator statement
    // (the statement including multiple calls to the SNARK verification
    // routine). The Zecale verifier contract must be instantiated with this
    // key in order to verify batches on-chain.
    rpc GetVerificationKey(google.protobuf.Empty) returns (zeth_proto.VerificationKey) {}

    // Register a new application. That is, an application name and a
    // corresponding verfication key. After registration, transactions for the
    // app can be submitted.
    //
    // (May not need an endpoint for this depending on the configuration /
    // use-case. For now, this is convenient for testing).
    rpc RegisterApplication(ApplicationRegistration) returns (google.protobuf.Empty) {}

    // Submit a transaction to be aggregated.
    rpc SubmitTransaction(TransactionToAggregate) returns (google.protobuf.Empty) {}

    // Request a proof that verifies a batch of nested proofs for the
    // application of the given name.
    //
    // (The only argument of this function is the name of the application for
    // which we want to generate an aggregate proof. The proofs to batch should
    // have already been deposited in the aggregator tx pool. Returns the proof
    // of CI for the validity of the batch of proofs. This endpoint won't
    // necessarily be useful in practice, but this is useful for some manual
    // triggering for now.)
    rpc GenerateAggregateProof(AggregateProofRequest) returns (zeth_proto.ExtendedProof) {}
}

message ApplicationRegistration {
    string application_name = 1;
    zeth_proto.VerificationKey vk = 2;
}

// A transaction for a specific application (determined by `application_name`),
// to be later aggregated into a batch.
message TransactionToAggregate {
    string application_name = 1;
    zeth_proto.ExtendedProof extended_proof = 2;
    // Only if an incentive structure is in place and fees are supported
    int32 fee_in_wei = 3;
}

message AggregateProofRequest {
    string application_name = 1;
}
