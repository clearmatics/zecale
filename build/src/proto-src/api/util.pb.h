// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/util.proto

#ifndef PROTOBUF_INCLUDED_api_2futil_2eproto
#define PROTOBUF_INCLUDED_api_2futil_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2futil_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2futil_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_api_2futil_2eproto();
namespace prover_proto {
class HexPointBaseGroup1Affine;
class HexPointBaseGroup1AffineDefaultTypeInternal;
extern HexPointBaseGroup1AffineDefaultTypeInternal _HexPointBaseGroup1Affine_default_instance_;
class HexPointBaseGroup2Affine;
class HexPointBaseGroup2AffineDefaultTypeInternal;
extern HexPointBaseGroup2AffineDefaultTypeInternal _HexPointBaseGroup2Affine_default_instance_;
class JoinsplitInput;
class JoinsplitInputDefaultTypeInternal;
extern JoinsplitInputDefaultTypeInternal _JoinsplitInput_default_instance_;
class ZethNote;
class ZethNoteDefaultTypeInternal;
extern ZethNoteDefaultTypeInternal _ZethNote_default_instance_;
}  // namespace prover_proto
namespace google {
namespace protobuf {
template<> ::prover_proto::HexPointBaseGroup1Affine* Arena::CreateMaybeMessage<::prover_proto::HexPointBaseGroup1Affine>(Arena*);
template<> ::prover_proto::HexPointBaseGroup2Affine* Arena::CreateMaybeMessage<::prover_proto::HexPointBaseGroup2Affine>(Arena*);
template<> ::prover_proto::JoinsplitInput* Arena::CreateMaybeMessage<::prover_proto::JoinsplitInput>(Arena*);
template<> ::prover_proto::ZethNote* Arena::CreateMaybeMessage<::prover_proto::ZethNote>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace prover_proto {

// ===================================================================

class ZethNote final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prover_proto.ZethNote) */ {
 public:
  ZethNote();
  virtual ~ZethNote();

  ZethNote(const ZethNote& from);

  inline ZethNote& operator=(const ZethNote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ZethNote(ZethNote&& from) noexcept
    : ZethNote() {
    *this = ::std::move(from);
  }

  inline ZethNote& operator=(ZethNote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ZethNote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZethNote* internal_default_instance() {
    return reinterpret_cast<const ZethNote*>(
               &_ZethNote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ZethNote* other);
  friend void swap(ZethNote& a, ZethNote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ZethNote* New() const final {
    return CreateMaybeMessage<ZethNote>(nullptr);
  }

  ZethNote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ZethNote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ZethNote& from);
  void MergeFrom(const ZethNote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZethNote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string apk = 1;
  void clear_apk();
  static const int kApkFieldNumber = 1;
  const ::std::string& apk() const;
  void set_apk(const ::std::string& value);
  #if LANG_CXX11
  void set_apk(::std::string&& value);
  #endif
  void set_apk(const char* value);
  void set_apk(const char* value, size_t size);
  ::std::string* mutable_apk();
  ::std::string* release_apk();
  void set_allocated_apk(::std::string* apk);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string rho = 3;
  void clear_rho();
  static const int kRhoFieldNumber = 3;
  const ::std::string& rho() const;
  void set_rho(const ::std::string& value);
  #if LANG_CXX11
  void set_rho(::std::string&& value);
  #endif
  void set_rho(const char* value);
  void set_rho(const char* value, size_t size);
  ::std::string* mutable_rho();
  ::std::string* release_rho();
  void set_allocated_rho(::std::string* rho);

  // string trap_r = 4;
  void clear_trap_r();
  static const int kTrapRFieldNumber = 4;
  const ::std::string& trap_r() const;
  void set_trap_r(const ::std::string& value);
  #if LANG_CXX11
  void set_trap_r(::std::string&& value);
  #endif
  void set_trap_r(const char* value);
  void set_trap_r(const char* value, size_t size);
  ::std::string* mutable_trap_r();
  ::std::string* release_trap_r();
  void set_allocated_trap_r(::std::string* trap_r);

  // @@protoc_insertion_point(class_scope:prover_proto.ZethNote)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr apk_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr rho_;
  ::google::protobuf::internal::ArenaStringPtr trap_r_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2futil_2eproto;
};
// -------------------------------------------------------------------

class JoinsplitInput final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prover_proto.JoinsplitInput) */ {
 public:
  JoinsplitInput();
  virtual ~JoinsplitInput();

  JoinsplitInput(const JoinsplitInput& from);

  inline JoinsplitInput& operator=(const JoinsplitInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoinsplitInput(JoinsplitInput&& from) noexcept
    : JoinsplitInput() {
    *this = ::std::move(from);
  }

  inline JoinsplitInput& operator=(JoinsplitInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const JoinsplitInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinsplitInput* internal_default_instance() {
    return reinterpret_cast<const JoinsplitInput*>(
               &_JoinsplitInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(JoinsplitInput* other);
  friend void swap(JoinsplitInput& a, JoinsplitInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinsplitInput* New() const final {
    return CreateMaybeMessage<JoinsplitInput>(nullptr);
  }

  JoinsplitInput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JoinsplitInput>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JoinsplitInput& from);
  void MergeFrom(const JoinsplitInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinsplitInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string merkle_path = 1;
  int merkle_path_size() const;
  void clear_merkle_path();
  static const int kMerklePathFieldNumber = 1;
  const ::std::string& merkle_path(int index) const;
  ::std::string* mutable_merkle_path(int index);
  void set_merkle_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_merkle_path(int index, ::std::string&& value);
  #endif
  void set_merkle_path(int index, const char* value);
  void set_merkle_path(int index, const char* value, size_t size);
  ::std::string* add_merkle_path();
  void add_merkle_path(const ::std::string& value);
  #if LANG_CXX11
  void add_merkle_path(::std::string&& value);
  #endif
  void add_merkle_path(const char* value);
  void add_merkle_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& merkle_path() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_merkle_path();

  // string spending_ask = 4;
  void clear_spending_ask();
  static const int kSpendingAskFieldNumber = 4;
  const ::std::string& spending_ask() const;
  void set_spending_ask(const ::std::string& value);
  #if LANG_CXX11
  void set_spending_ask(::std::string&& value);
  #endif
  void set_spending_ask(const char* value);
  void set_spending_ask(const char* value, size_t size);
  ::std::string* mutable_spending_ask();
  ::std::string* release_spending_ask();
  void set_allocated_spending_ask(::std::string* spending_ask);

  // string nullifier = 5;
  void clear_nullifier();
  static const int kNullifierFieldNumber = 5;
  const ::std::string& nullifier() const;
  void set_nullifier(const ::std::string& value);
  #if LANG_CXX11
  void set_nullifier(::std::string&& value);
  #endif
  void set_nullifier(const char* value);
  void set_nullifier(const char* value, size_t size);
  ::std::string* mutable_nullifier();
  ::std::string* release_nullifier();
  void set_allocated_nullifier(::std::string* nullifier);

  // .prover_proto.ZethNote note = 3;
  bool has_note() const;
  void clear_note();
  static const int kNoteFieldNumber = 3;
  const ::prover_proto::ZethNote& note() const;
  ::prover_proto::ZethNote* release_note();
  ::prover_proto::ZethNote* mutable_note();
  void set_allocated_note(::prover_proto::ZethNote* note);

  // int64 address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  ::google::protobuf::int64 address() const;
  void set_address(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:prover_proto.JoinsplitInput)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> merkle_path_;
  ::google::protobuf::internal::ArenaStringPtr spending_ask_;
  ::google::protobuf::internal::ArenaStringPtr nullifier_;
  ::prover_proto::ZethNote* note_;
  ::google::protobuf::int64 address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2futil_2eproto;
};
// -------------------------------------------------------------------

class HexPointBaseGroup1Affine final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prover_proto.HexPointBaseGroup1Affine) */ {
 public:
  HexPointBaseGroup1Affine();
  virtual ~HexPointBaseGroup1Affine();

  HexPointBaseGroup1Affine(const HexPointBaseGroup1Affine& from);

  inline HexPointBaseGroup1Affine& operator=(const HexPointBaseGroup1Affine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HexPointBaseGroup1Affine(HexPointBaseGroup1Affine&& from) noexcept
    : HexPointBaseGroup1Affine() {
    *this = ::std::move(from);
  }

  inline HexPointBaseGroup1Affine& operator=(HexPointBaseGroup1Affine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HexPointBaseGroup1Affine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HexPointBaseGroup1Affine* internal_default_instance() {
    return reinterpret_cast<const HexPointBaseGroup1Affine*>(
               &_HexPointBaseGroup1Affine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(HexPointBaseGroup1Affine* other);
  friend void swap(HexPointBaseGroup1Affine& a, HexPointBaseGroup1Affine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HexPointBaseGroup1Affine* New() const final {
    return CreateMaybeMessage<HexPointBaseGroup1Affine>(nullptr);
  }

  HexPointBaseGroup1Affine* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HexPointBaseGroup1Affine>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HexPointBaseGroup1Affine& from);
  void MergeFrom(const HexPointBaseGroup1Affine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HexPointBaseGroup1Affine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string x_coord = 1;
  void clear_x_coord();
  static const int kXCoordFieldNumber = 1;
  const ::std::string& x_coord() const;
  void set_x_coord(const ::std::string& value);
  #if LANG_CXX11
  void set_x_coord(::std::string&& value);
  #endif
  void set_x_coord(const char* value);
  void set_x_coord(const char* value, size_t size);
  ::std::string* mutable_x_coord();
  ::std::string* release_x_coord();
  void set_allocated_x_coord(::std::string* x_coord);

  // string y_coord = 2;
  void clear_y_coord();
  static const int kYCoordFieldNumber = 2;
  const ::std::string& y_coord() const;
  void set_y_coord(const ::std::string& value);
  #if LANG_CXX11
  void set_y_coord(::std::string&& value);
  #endif
  void set_y_coord(const char* value);
  void set_y_coord(const char* value, size_t size);
  ::std::string* mutable_y_coord();
  ::std::string* release_y_coord();
  void set_allocated_y_coord(::std::string* y_coord);

  // @@protoc_insertion_point(class_scope:prover_proto.HexPointBaseGroup1Affine)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr x_coord_;
  ::google::protobuf::internal::ArenaStringPtr y_coord_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2futil_2eproto;
};
// -------------------------------------------------------------------

class HexPointBaseGroup2Affine final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prover_proto.HexPointBaseGroup2Affine) */ {
 public:
  HexPointBaseGroup2Affine();
  virtual ~HexPointBaseGroup2Affine();

  HexPointBaseGroup2Affine(const HexPointBaseGroup2Affine& from);

  inline HexPointBaseGroup2Affine& operator=(const HexPointBaseGroup2Affine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HexPointBaseGroup2Affine(HexPointBaseGroup2Affine&& from) noexcept
    : HexPointBaseGroup2Affine() {
    *this = ::std::move(from);
  }

  inline HexPointBaseGroup2Affine& operator=(HexPointBaseGroup2Affine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HexPointBaseGroup2Affine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HexPointBaseGroup2Affine* internal_default_instance() {
    return reinterpret_cast<const HexPointBaseGroup2Affine*>(
               &_HexPointBaseGroup2Affine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(HexPointBaseGroup2Affine* other);
  friend void swap(HexPointBaseGroup2Affine& a, HexPointBaseGroup2Affine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HexPointBaseGroup2Affine* New() const final {
    return CreateMaybeMessage<HexPointBaseGroup2Affine>(nullptr);
  }

  HexPointBaseGroup2Affine* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HexPointBaseGroup2Affine>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HexPointBaseGroup2Affine& from);
  void MergeFrom(const HexPointBaseGroup2Affine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HexPointBaseGroup2Affine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string x_c1_coord = 1;
  void clear_x_c1_coord();
  static const int kXC1CoordFieldNumber = 1;
  const ::std::string& x_c1_coord() const;
  void set_x_c1_coord(const ::std::string& value);
  #if LANG_CXX11
  void set_x_c1_coord(::std::string&& value);
  #endif
  void set_x_c1_coord(const char* value);
  void set_x_c1_coord(const char* value, size_t size);
  ::std::string* mutable_x_c1_coord();
  ::std::string* release_x_c1_coord();
  void set_allocated_x_c1_coord(::std::string* x_c1_coord);

  // string x_c0_coord = 2;
  void clear_x_c0_coord();
  static const int kXC0CoordFieldNumber = 2;
  const ::std::string& x_c0_coord() const;
  void set_x_c0_coord(const ::std::string& value);
  #if LANG_CXX11
  void set_x_c0_coord(::std::string&& value);
  #endif
  void set_x_c0_coord(const char* value);
  void set_x_c0_coord(const char* value, size_t size);
  ::std::string* mutable_x_c0_coord();
  ::std::string* release_x_c0_coord();
  void set_allocated_x_c0_coord(::std::string* x_c0_coord);

  // string y_c1_coord = 3;
  void clear_y_c1_coord();
  static const int kYC1CoordFieldNumber = 3;
  const ::std::string& y_c1_coord() const;
  void set_y_c1_coord(const ::std::string& value);
  #if LANG_CXX11
  void set_y_c1_coord(::std::string&& value);
  #endif
  void set_y_c1_coord(const char* value);
  void set_y_c1_coord(const char* value, size_t size);
  ::std::string* mutable_y_c1_coord();
  ::std::string* release_y_c1_coord();
  void set_allocated_y_c1_coord(::std::string* y_c1_coord);

  // string y_c0_coord = 4;
  void clear_y_c0_coord();
  static const int kYC0CoordFieldNumber = 4;
  const ::std::string& y_c0_coord() const;
  void set_y_c0_coord(const ::std::string& value);
  #if LANG_CXX11
  void set_y_c0_coord(::std::string&& value);
  #endif
  void set_y_c0_coord(const char* value);
  void set_y_c0_coord(const char* value, size_t size);
  ::std::string* mutable_y_c0_coord();
  ::std::string* release_y_c0_coord();
  void set_allocated_y_c0_coord(::std::string* y_c0_coord);

  // @@protoc_insertion_point(class_scope:prover_proto.HexPointBaseGroup2Affine)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr x_c1_coord_;
  ::google::protobuf::internal::ArenaStringPtr x_c0_coord_;
  ::google::protobuf::internal::ArenaStringPtr y_c1_coord_;
  ::google::protobuf::internal::ArenaStringPtr y_c0_coord_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2futil_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZethNote

// string apk = 1;
inline void ZethNote::clear_apk() {
  apk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ZethNote::apk() const {
  // @@protoc_insertion_point(field_get:prover_proto.ZethNote.apk)
  return apk_.GetNoArena();
}
inline void ZethNote::set_apk(const ::std::string& value) {
  
  apk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prover_proto.ZethNote.apk)
}
#if LANG_CXX11
inline void ZethNote::set_apk(::std::string&& value) {
  
  apk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prover_proto.ZethNote.apk)
}
#endif
inline void ZethNote::set_apk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  apk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prover_proto.ZethNote.apk)
}
inline void ZethNote::set_apk(const char* value, size_t size) {
  
  apk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prover_proto.ZethNote.apk)
}
inline ::std::string* ZethNote::mutable_apk() {
  
  // @@protoc_insertion_point(field_mutable:prover_proto.ZethNote.apk)
  return apk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZethNote::release_apk() {
  // @@protoc_insertion_point(field_release:prover_proto.ZethNote.apk)
  
  return apk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZethNote::set_allocated_apk(::std::string* apk) {
  if (apk != nullptr) {
    
  } else {
    
  }
  apk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apk);
  // @@protoc_insertion_point(field_set_allocated:prover_proto.ZethNote.apk)
}

// string value = 2;
inline void ZethNote::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ZethNote::value() const {
  // @@protoc_insertion_point(field_get:prover_proto.ZethNote.value)
  return value_.GetNoArena();
}
inline void ZethNote::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prover_proto.ZethNote.value)
}
#if LANG_CXX11
inline void ZethNote::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prover_proto.ZethNote.value)
}
#endif
inline void ZethNote::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prover_proto.ZethNote.value)
}
inline void ZethNote::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prover_proto.ZethNote.value)
}
inline ::std::string* ZethNote::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:prover_proto.ZethNote.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZethNote::release_value() {
  // @@protoc_insertion_point(field_release:prover_proto.ZethNote.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZethNote::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:prover_proto.ZethNote.value)
}

// string rho = 3;
inline void ZethNote::clear_rho() {
  rho_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ZethNote::rho() const {
  // @@protoc_insertion_point(field_get:prover_proto.ZethNote.rho)
  return rho_.GetNoArena();
}
inline void ZethNote::set_rho(const ::std::string& value) {
  
  rho_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prover_proto.ZethNote.rho)
}
#if LANG_CXX11
inline void ZethNote::set_rho(::std::string&& value) {
  
  rho_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prover_proto.ZethNote.rho)
}
#endif
inline void ZethNote::set_rho(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rho_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prover_proto.ZethNote.rho)
}
inline void ZethNote::set_rho(const char* value, size_t size) {
  
  rho_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prover_proto.ZethNote.rho)
}
inline ::std::string* ZethNote::mutable_rho() {
  
  // @@protoc_insertion_point(field_mutable:prover_proto.ZethNote.rho)
  return rho_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZethNote::release_rho() {
  // @@protoc_insertion_point(field_release:prover_proto.ZethNote.rho)
  
  return rho_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZethNote::set_allocated_rho(::std::string* rho) {
  if (rho != nullptr) {
    
  } else {
    
  }
  rho_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rho);
  // @@protoc_insertion_point(field_set_allocated:prover_proto.ZethNote.rho)
}

// string trap_r = 4;
inline void ZethNote::clear_trap_r() {
  trap_r_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ZethNote::trap_r() const {
  // @@protoc_insertion_point(field_get:prover_proto.ZethNote.trap_r)
  return trap_r_.GetNoArena();
}
inline void ZethNote::set_trap_r(const ::std::string& value) {
  
  trap_r_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prover_proto.ZethNote.trap_r)
}
#if LANG_CXX11
inline void ZethNote::set_trap_r(::std::string&& value) {
  
  trap_r_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prover_proto.ZethNote.trap_r)
}
#endif
inline void ZethNote::set_trap_r(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trap_r_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prover_proto.ZethNote.trap_r)
}
inline void ZethNote::set_trap_r(const char* value, size_t size) {
  
  trap_r_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prover_proto.ZethNote.trap_r)
}
inline ::std::string* ZethNote::mutable_trap_r() {
  
  // @@protoc_insertion_point(field_mutable:prover_proto.ZethNote.trap_r)
  return trap_r_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZethNote::release_trap_r() {
  // @@protoc_insertion_point(field_release:prover_proto.ZethNote.trap_r)
  
  return trap_r_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZethNote::set_allocated_trap_r(::std::string* trap_r) {
  if (trap_r != nullptr) {
    
  } else {
    
  }
  trap_r_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trap_r);
  // @@protoc_insertion_point(field_set_allocated:prover_proto.ZethNote.trap_r)
}

// -------------------------------------------------------------------

// JoinsplitInput

// repeated string merkle_path = 1;
inline int JoinsplitInput::merkle_path_size() const {
  return merkle_path_.size();
}
inline void JoinsplitInput::clear_merkle_path() {
  merkle_path_.Clear();
}
inline const ::std::string& JoinsplitInput::merkle_path(int index) const {
  // @@protoc_insertion_point(field_get:prover_proto.JoinsplitInput.merkle_path)
  return merkle_path_.Get(index);
}
inline ::std::string* JoinsplitInput::mutable_merkle_path(int index) {
  // @@protoc_insertion_point(field_mutable:prover_proto.JoinsplitInput.merkle_path)
  return merkle_path_.Mutable(index);
}
inline void JoinsplitInput::set_merkle_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:prover_proto.JoinsplitInput.merkle_path)
  merkle_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void JoinsplitInput::set_merkle_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:prover_proto.JoinsplitInput.merkle_path)
  merkle_path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void JoinsplitInput::set_merkle_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  merkle_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:prover_proto.JoinsplitInput.merkle_path)
}
inline void JoinsplitInput::set_merkle_path(int index, const char* value, size_t size) {
  merkle_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:prover_proto.JoinsplitInput.merkle_path)
}
inline ::std::string* JoinsplitInput::add_merkle_path() {
  // @@protoc_insertion_point(field_add_mutable:prover_proto.JoinsplitInput.merkle_path)
  return merkle_path_.Add();
}
inline void JoinsplitInput::add_merkle_path(const ::std::string& value) {
  merkle_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:prover_proto.JoinsplitInput.merkle_path)
}
#if LANG_CXX11
inline void JoinsplitInput::add_merkle_path(::std::string&& value) {
  merkle_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:prover_proto.JoinsplitInput.merkle_path)
}
#endif
inline void JoinsplitInput::add_merkle_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  merkle_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:prover_proto.JoinsplitInput.merkle_path)
}
inline void JoinsplitInput::add_merkle_path(const char* value, size_t size) {
  merkle_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:prover_proto.JoinsplitInput.merkle_path)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
JoinsplitInput::merkle_path() const {
  // @@protoc_insertion_point(field_list:prover_proto.JoinsplitInput.merkle_path)
  return merkle_path_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
JoinsplitInput::mutable_merkle_path() {
  // @@protoc_insertion_point(field_mutable_list:prover_proto.JoinsplitInput.merkle_path)
  return &merkle_path_;
}

// int64 address = 2;
inline void JoinsplitInput::clear_address() {
  address_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 JoinsplitInput::address() const {
  // @@protoc_insertion_point(field_get:prover_proto.JoinsplitInput.address)
  return address_;
}
inline void JoinsplitInput::set_address(::google::protobuf::int64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:prover_proto.JoinsplitInput.address)
}

// .prover_proto.ZethNote note = 3;
inline bool JoinsplitInput::has_note() const {
  return this != internal_default_instance() && note_ != nullptr;
}
inline void JoinsplitInput::clear_note() {
  if (GetArenaNoVirtual() == nullptr && note_ != nullptr) {
    delete note_;
  }
  note_ = nullptr;
}
inline const ::prover_proto::ZethNote& JoinsplitInput::note() const {
  const ::prover_proto::ZethNote* p = note_;
  // @@protoc_insertion_point(field_get:prover_proto.JoinsplitInput.note)
  return p != nullptr ? *p : *reinterpret_cast<const ::prover_proto::ZethNote*>(
      &::prover_proto::_ZethNote_default_instance_);
}
inline ::prover_proto::ZethNote* JoinsplitInput::release_note() {
  // @@protoc_insertion_point(field_release:prover_proto.JoinsplitInput.note)
  
  ::prover_proto::ZethNote* temp = note_;
  note_ = nullptr;
  return temp;
}
inline ::prover_proto::ZethNote* JoinsplitInput::mutable_note() {
  
  if (note_ == nullptr) {
    auto* p = CreateMaybeMessage<::prover_proto::ZethNote>(GetArenaNoVirtual());
    note_ = p;
  }
  // @@protoc_insertion_point(field_mutable:prover_proto.JoinsplitInput.note)
  return note_;
}
inline void JoinsplitInput::set_allocated_note(::prover_proto::ZethNote* note) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete note_;
  }
  if (note) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      note = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, note, submessage_arena);
    }
    
  } else {
    
  }
  note_ = note;
  // @@protoc_insertion_point(field_set_allocated:prover_proto.JoinsplitInput.note)
}

// string spending_ask = 4;
inline void JoinsplitInput::clear_spending_ask() {
  spending_ask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinsplitInput::spending_ask() const {
  // @@protoc_insertion_point(field_get:prover_proto.JoinsplitInput.spending_ask)
  return spending_ask_.GetNoArena();
}
inline void JoinsplitInput::set_spending_ask(const ::std::string& value) {
  
  spending_ask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prover_proto.JoinsplitInput.spending_ask)
}
#if LANG_CXX11
inline void JoinsplitInput::set_spending_ask(::std::string&& value) {
  
  spending_ask_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prover_proto.JoinsplitInput.spending_ask)
}
#endif
inline void JoinsplitInput::set_spending_ask(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spending_ask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prover_proto.JoinsplitInput.spending_ask)
}
inline void JoinsplitInput::set_spending_ask(const char* value, size_t size) {
  
  spending_ask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prover_proto.JoinsplitInput.spending_ask)
}
inline ::std::string* JoinsplitInput::mutable_spending_ask() {
  
  // @@protoc_insertion_point(field_mutable:prover_proto.JoinsplitInput.spending_ask)
  return spending_ask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinsplitInput::release_spending_ask() {
  // @@protoc_insertion_point(field_release:prover_proto.JoinsplitInput.spending_ask)
  
  return spending_ask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinsplitInput::set_allocated_spending_ask(::std::string* spending_ask) {
  if (spending_ask != nullptr) {
    
  } else {
    
  }
  spending_ask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spending_ask);
  // @@protoc_insertion_point(field_set_allocated:prover_proto.JoinsplitInput.spending_ask)
}

// string nullifier = 5;
inline void JoinsplitInput::clear_nullifier() {
  nullifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinsplitInput::nullifier() const {
  // @@protoc_insertion_point(field_get:prover_proto.JoinsplitInput.nullifier)
  return nullifier_.GetNoArena();
}
inline void JoinsplitInput::set_nullifier(const ::std::string& value) {
  
  nullifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prover_proto.JoinsplitInput.nullifier)
}
#if LANG_CXX11
inline void JoinsplitInput::set_nullifier(::std::string&& value) {
  
  nullifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prover_proto.JoinsplitInput.nullifier)
}
#endif
inline void JoinsplitInput::set_nullifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nullifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prover_proto.JoinsplitInput.nullifier)
}
inline void JoinsplitInput::set_nullifier(const char* value, size_t size) {
  
  nullifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prover_proto.JoinsplitInput.nullifier)
}
inline ::std::string* JoinsplitInput::mutable_nullifier() {
  
  // @@protoc_insertion_point(field_mutable:prover_proto.JoinsplitInput.nullifier)
  return nullifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinsplitInput::release_nullifier() {
  // @@protoc_insertion_point(field_release:prover_proto.JoinsplitInput.nullifier)
  
  return nullifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinsplitInput::set_allocated_nullifier(::std::string* nullifier) {
  if (nullifier != nullptr) {
    
  } else {
    
  }
  nullifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nullifier);
  // @@protoc_insertion_point(field_set_allocated:prover_proto.JoinsplitInput.nullifier)
}

// -------------------------------------------------------------------

// HexPointBaseGroup1Affine

// string x_coord = 1;
inline void HexPointBaseGroup1Affine::clear_x_coord() {
  x_coord_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HexPointBaseGroup1Affine::x_coord() const {
  // @@protoc_insertion_point(field_get:prover_proto.HexPointBaseGroup1Affine.x_coord)
  return x_coord_.GetNoArena();
}
inline void HexPointBaseGroup1Affine::set_x_coord(const ::std::string& value) {
  
  x_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prover_proto.HexPointBaseGroup1Affine.x_coord)
}
#if LANG_CXX11
inline void HexPointBaseGroup1Affine::set_x_coord(::std::string&& value) {
  
  x_coord_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prover_proto.HexPointBaseGroup1Affine.x_coord)
}
#endif
inline void HexPointBaseGroup1Affine::set_x_coord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  x_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prover_proto.HexPointBaseGroup1Affine.x_coord)
}
inline void HexPointBaseGroup1Affine::set_x_coord(const char* value, size_t size) {
  
  x_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prover_proto.HexPointBaseGroup1Affine.x_coord)
}
inline ::std::string* HexPointBaseGroup1Affine::mutable_x_coord() {
  
  // @@protoc_insertion_point(field_mutable:prover_proto.HexPointBaseGroup1Affine.x_coord)
  return x_coord_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HexPointBaseGroup1Affine::release_x_coord() {
  // @@protoc_insertion_point(field_release:prover_proto.HexPointBaseGroup1Affine.x_coord)
  
  return x_coord_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HexPointBaseGroup1Affine::set_allocated_x_coord(::std::string* x_coord) {
  if (x_coord != nullptr) {
    
  } else {
    
  }
  x_coord_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x_coord);
  // @@protoc_insertion_point(field_set_allocated:prover_proto.HexPointBaseGroup1Affine.x_coord)
}

// string y_coord = 2;
inline void HexPointBaseGroup1Affine::clear_y_coord() {
  y_coord_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HexPointBaseGroup1Affine::y_coord() const {
  // @@protoc_insertion_point(field_get:prover_proto.HexPointBaseGroup1Affine.y_coord)
  return y_coord_.GetNoArena();
}
inline void HexPointBaseGroup1Affine::set_y_coord(const ::std::string& value) {
  
  y_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prover_proto.HexPointBaseGroup1Affine.y_coord)
}
#if LANG_CXX11
inline void HexPointBaseGroup1Affine::set_y_coord(::std::string&& value) {
  
  y_coord_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prover_proto.HexPointBaseGroup1Affine.y_coord)
}
#endif
inline void HexPointBaseGroup1Affine::set_y_coord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  y_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prover_proto.HexPointBaseGroup1Affine.y_coord)
}
inline void HexPointBaseGroup1Affine::set_y_coord(const char* value, size_t size) {
  
  y_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prover_proto.HexPointBaseGroup1Affine.y_coord)
}
inline ::std::string* HexPointBaseGroup1Affine::mutable_y_coord() {
  
  // @@protoc_insertion_point(field_mutable:prover_proto.HexPointBaseGroup1Affine.y_coord)
  return y_coord_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HexPointBaseGroup1Affine::release_y_coord() {
  // @@protoc_insertion_point(field_release:prover_proto.HexPointBaseGroup1Affine.y_coord)
  
  return y_coord_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HexPointBaseGroup1Affine::set_allocated_y_coord(::std::string* y_coord) {
  if (y_coord != nullptr) {
    
  } else {
    
  }
  y_coord_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), y_coord);
  // @@protoc_insertion_point(field_set_allocated:prover_proto.HexPointBaseGroup1Affine.y_coord)
}

// -------------------------------------------------------------------

// HexPointBaseGroup2Affine

// string x_c1_coord = 1;
inline void HexPointBaseGroup2Affine::clear_x_c1_coord() {
  x_c1_coord_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HexPointBaseGroup2Affine::x_c1_coord() const {
  // @@protoc_insertion_point(field_get:prover_proto.HexPointBaseGroup2Affine.x_c1_coord)
  return x_c1_coord_.GetNoArena();
}
inline void HexPointBaseGroup2Affine::set_x_c1_coord(const ::std::string& value) {
  
  x_c1_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prover_proto.HexPointBaseGroup2Affine.x_c1_coord)
}
#if LANG_CXX11
inline void HexPointBaseGroup2Affine::set_x_c1_coord(::std::string&& value) {
  
  x_c1_coord_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prover_proto.HexPointBaseGroup2Affine.x_c1_coord)
}
#endif
inline void HexPointBaseGroup2Affine::set_x_c1_coord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  x_c1_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prover_proto.HexPointBaseGroup2Affine.x_c1_coord)
}
inline void HexPointBaseGroup2Affine::set_x_c1_coord(const char* value, size_t size) {
  
  x_c1_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prover_proto.HexPointBaseGroup2Affine.x_c1_coord)
}
inline ::std::string* HexPointBaseGroup2Affine::mutable_x_c1_coord() {
  
  // @@protoc_insertion_point(field_mutable:prover_proto.HexPointBaseGroup2Affine.x_c1_coord)
  return x_c1_coord_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HexPointBaseGroup2Affine::release_x_c1_coord() {
  // @@protoc_insertion_point(field_release:prover_proto.HexPointBaseGroup2Affine.x_c1_coord)
  
  return x_c1_coord_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HexPointBaseGroup2Affine::set_allocated_x_c1_coord(::std::string* x_c1_coord) {
  if (x_c1_coord != nullptr) {
    
  } else {
    
  }
  x_c1_coord_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x_c1_coord);
  // @@protoc_insertion_point(field_set_allocated:prover_proto.HexPointBaseGroup2Affine.x_c1_coord)
}

// string x_c0_coord = 2;
inline void HexPointBaseGroup2Affine::clear_x_c0_coord() {
  x_c0_coord_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HexPointBaseGroup2Affine::x_c0_coord() const {
  // @@protoc_insertion_point(field_get:prover_proto.HexPointBaseGroup2Affine.x_c0_coord)
  return x_c0_coord_.GetNoArena();
}
inline void HexPointBaseGroup2Affine::set_x_c0_coord(const ::std::string& value) {
  
  x_c0_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prover_proto.HexPointBaseGroup2Affine.x_c0_coord)
}
#if LANG_CXX11
inline void HexPointBaseGroup2Affine::set_x_c0_coord(::std::string&& value) {
  
  x_c0_coord_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prover_proto.HexPointBaseGroup2Affine.x_c0_coord)
}
#endif
inline void HexPointBaseGroup2Affine::set_x_c0_coord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  x_c0_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prover_proto.HexPointBaseGroup2Affine.x_c0_coord)
}
inline void HexPointBaseGroup2Affine::set_x_c0_coord(const char* value, size_t size) {
  
  x_c0_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prover_proto.HexPointBaseGroup2Affine.x_c0_coord)
}
inline ::std::string* HexPointBaseGroup2Affine::mutable_x_c0_coord() {
  
  // @@protoc_insertion_point(field_mutable:prover_proto.HexPointBaseGroup2Affine.x_c0_coord)
  return x_c0_coord_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HexPointBaseGroup2Affine::release_x_c0_coord() {
  // @@protoc_insertion_point(field_release:prover_proto.HexPointBaseGroup2Affine.x_c0_coord)
  
  return x_c0_coord_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HexPointBaseGroup2Affine::set_allocated_x_c0_coord(::std::string* x_c0_coord) {
  if (x_c0_coord != nullptr) {
    
  } else {
    
  }
  x_c0_coord_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x_c0_coord);
  // @@protoc_insertion_point(field_set_allocated:prover_proto.HexPointBaseGroup2Affine.x_c0_coord)
}

// string y_c1_coord = 3;
inline void HexPointBaseGroup2Affine::clear_y_c1_coord() {
  y_c1_coord_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HexPointBaseGroup2Affine::y_c1_coord() const {
  // @@protoc_insertion_point(field_get:prover_proto.HexPointBaseGroup2Affine.y_c1_coord)
  return y_c1_coord_.GetNoArena();
}
inline void HexPointBaseGroup2Affine::set_y_c1_coord(const ::std::string& value) {
  
  y_c1_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prover_proto.HexPointBaseGroup2Affine.y_c1_coord)
}
#if LANG_CXX11
inline void HexPointBaseGroup2Affine::set_y_c1_coord(::std::string&& value) {
  
  y_c1_coord_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prover_proto.HexPointBaseGroup2Affine.y_c1_coord)
}
#endif
inline void HexPointBaseGroup2Affine::set_y_c1_coord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  y_c1_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prover_proto.HexPointBaseGroup2Affine.y_c1_coord)
}
inline void HexPointBaseGroup2Affine::set_y_c1_coord(const char* value, size_t size) {
  
  y_c1_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prover_proto.HexPointBaseGroup2Affine.y_c1_coord)
}
inline ::std::string* HexPointBaseGroup2Affine::mutable_y_c1_coord() {
  
  // @@protoc_insertion_point(field_mutable:prover_proto.HexPointBaseGroup2Affine.y_c1_coord)
  return y_c1_coord_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HexPointBaseGroup2Affine::release_y_c1_coord() {
  // @@protoc_insertion_point(field_release:prover_proto.HexPointBaseGroup2Affine.y_c1_coord)
  
  return y_c1_coord_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HexPointBaseGroup2Affine::set_allocated_y_c1_coord(::std::string* y_c1_coord) {
  if (y_c1_coord != nullptr) {
    
  } else {
    
  }
  y_c1_coord_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), y_c1_coord);
  // @@protoc_insertion_point(field_set_allocated:prover_proto.HexPointBaseGroup2Affine.y_c1_coord)
}

// string y_c0_coord = 4;
inline void HexPointBaseGroup2Affine::clear_y_c0_coord() {
  y_c0_coord_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HexPointBaseGroup2Affine::y_c0_coord() const {
  // @@protoc_insertion_point(field_get:prover_proto.HexPointBaseGroup2Affine.y_c0_coord)
  return y_c0_coord_.GetNoArena();
}
inline void HexPointBaseGroup2Affine::set_y_c0_coord(const ::std::string& value) {
  
  y_c0_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prover_proto.HexPointBaseGroup2Affine.y_c0_coord)
}
#if LANG_CXX11
inline void HexPointBaseGroup2Affine::set_y_c0_coord(::std::string&& value) {
  
  y_c0_coord_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prover_proto.HexPointBaseGroup2Affine.y_c0_coord)
}
#endif
inline void HexPointBaseGroup2Affine::set_y_c0_coord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  y_c0_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prover_proto.HexPointBaseGroup2Affine.y_c0_coord)
}
inline void HexPointBaseGroup2Affine::set_y_c0_coord(const char* value, size_t size) {
  
  y_c0_coord_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prover_proto.HexPointBaseGroup2Affine.y_c0_coord)
}
inline ::std::string* HexPointBaseGroup2Affine::mutable_y_c0_coord() {
  
  // @@protoc_insertion_point(field_mutable:prover_proto.HexPointBaseGroup2Affine.y_c0_coord)
  return y_c0_coord_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HexPointBaseGroup2Affine::release_y_c0_coord() {
  // @@protoc_insertion_point(field_release:prover_proto.HexPointBaseGroup2Affine.y_c0_coord)
  
  return y_c0_coord_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HexPointBaseGroup2Affine::set_allocated_y_c0_coord(::std::string* y_c0_coord) {
  if (y_c0_coord != nullptr) {
    
  } else {
    
  }
  y_c0_coord_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), y_c0_coord);
  // @@protoc_insertion_point(field_set_allocated:prover_proto.HexPointBaseGroup2Affine.y_c0_coord)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prover_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_api_2futil_2eproto
