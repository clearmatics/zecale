#!/usr/bin/env bash

set -x
set -e

# This must match the app_name in the nested transaction files.
APP_NAME="dummy_app"


ROOT_DIR=`pwd`
TEST_DATA_DIR=${ROOT_DIR}/testdata

# 1 - user_name
function setup_user() {
    mkdir -p $1
    pushd $1
    [ -e eth-network ] || zeth-helper eth-gen-network-config
    [ -e eth-address ] || \
        (zeth-helper eth-gen-address && zeth-helper eth-fund)
    popd
}

mkdir -p _test_client_data
pushd _test_client_data

setup_user aggregator_deployer
setup_user application_deployer
setup_user user1

# Deploy zecale contract

pushd aggregator_deployer
    [ -e aggregator_vk.json ] || zecale get-verification-key
    [ -e zecale-instance ] || zecale deploy
popd # aggregator_deployer

# Deploy and register the application

pushd application_deployer
    [ -e zecale-instance ] || cp ../aggregator_deployer/zecale-instance .
    [ -e app-vk.json ] || cp ${TEST_DATA_DIR}/dummy_app/vk.json app-vk.json
    [ -e vk-hash ] || zecale nested-verification-key-hash app-vk.json > vk-hash
    [ -e app-instance ] || zecale-dummy-app deploy `cat vk-hash`

    zecale register --key app-vk.json --name ${APP_NAME} || echo -n
    # Re-registration should fail
    ( zecale register --key app-vk.json --name ${APP_NAME} ) && \
        (echo Expected duplicate registration to fail; exit 1)

    echo Check starting app state
    zecale-dummy-app get 7 --check 0
    zecale-dummy-app get 8 --check 0
    zecale-dummy-app get 9 --check 0
    zecale-dummy-app get 10 --check 0
popd # application_deployer

# Submit 4 transactions to the aggregator (enough for 2 batches)

pushd user1

    [ -e zecale-instance ] || cp ../aggregator_deployer/zecale-instance .
    [ -e app-vk.json ] || cp ${TEST_DATA_DIR}/dummy_app/vk.json app-vk.json
    [ -e vk-hash ] || cp ../application_deployer/vk-hash .
    [ -e app-instance ] || cp ../application_deployer/app-instance .

    # Submit transaction data to the aggregation server
    zecale submit ${TEST_DATA_DIR}/dummy_app/extproof1.json
    zecale submit ${TEST_DATA_DIR}/dummy_app/extproof2.json
    zecale submit ${TEST_DATA_DIR}/dummy_app/extproof3.json
    zecale submit ${TEST_DATA_DIR}/dummy_app/extproof4.json

    # Get a single batch and send to the contract
    zecale get-batch --name ${APP_NAME} --batch-file batch1.json
    zecale check-batch batch1.json --batch-size 2
    zecale submit-batch batch1.json --wait

    echo Check app state after batch 1
    zecale-dummy-app get 7 --check 23
    zecale-dummy-app get 8 --check 24
    zecale-dummy-app get 9 --check 0
    zecale-dummy-app get 10 --check 0

    # get a second batch and send to the contract
    zecale get-batch --name ${APP_NAME} --batch-file batch2.json
    zecale check-batch batch2.json --batch-size 2
    zecale submit-batch batch2.json --wait

    echo Check app state after batch 2
    zecale-dummy-app get 7 --check 23
    zecale-dummy-app get 8 --check 24
    zecale-dummy-app get 9 --check 25
    zecale-dummy-app get 10 --check 26

    # A third batch should be available
    zecale get-batch --name ${APP_NAME} --batch-file batch3.json && \
        (echo Expected failure when no batch available; exit 1)

popd # user1

popd # _test_client_data

set +e
set +x

echo "=================================================="
echo "==              Client Test Passed              =="
echo "=================================================="
