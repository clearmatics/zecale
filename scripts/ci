#!/usr/bin/env bash

platform=`uname`
echo platform=${platform}
echo "running against commit: "`git log --oneline --no-decorate -n 1`

. depends/zeth/scripts/ci_utils.sh
. scripts/ci_utils.sh

set -x
set -e

function check_format() {
    scripts/format
    git diff --no-ext-diff | head -n 20 > format_errors
    num_lines=`cat format_errors | wc -l`
    if [ "${num_lines}" != "0" ] ; then
        echo CODE FORMATTING ERRORS:
        cat format_errors
        exit 1
    fi

    # Perform the check for copyright notices here
    scripts/check_copyright
}

function check_cpp() {
    apk add cppcheck
    cppcheck --version

    # Configure and run cppcheck
    mkdir -p build
    pushd build
    cmake -DUSE_CPP_CHECK=ON ..
    make VERBOSE=1 cppcheck -j 5
    popd
}

function setup_client() {

    # Setup zeth client
    pushd depends/zeth/client
    python3 -m venv env
    . env/bin/activate
    pip install --upgrade pip --progress-bar off
    make setup
    deactivate
    popd

    # Setup the zecale client
    pushd client
    python3 -m venv env
    . env/bin/activate
    pip install --upgrade pip --progress-bar off
    make setup
    deactivate
    popd
}

function check_client() {
    setup_client

    # Execute Zecale client setup from client/README.md
    pushd client
    . env/bin/activate
    make check
    deactivate
    popd
}

function integration_tests() {
    setup_client

    # Use zeth scripts to start ganache (from zeth root)
    pushd depends/zeth
    ganache_setup
    ganache_start
    popd

    # Start aggregator
    aggregator_start

    # Run integration test
    . client/env/bin/activate
    ./scripts/test_client
    deactivate

    aggregator_stop

    pushd depends/zeth
    ganache_stop
    popd
}

function build() {

    cpp_build_setup

    # Enable warnings-as-errors
    # TODO: Uncomment, and support compilation with -Werror set
    #cxx_flags="-Werror"
    cxx_flags=""

    if [ "${platform}" == "Darwin" ] ; then
        openssl_path=$(brew --prefix openssl)
        export PATH="/usr/local/opt/llvm/bin:/usr/local/bin:${PATH}"
        export PKG_CONFIG_PATH="${openssl_path}/lib/pkgconfig"
        export LIBRARY_PATH="${openssl_path}/lib"
        export LDFLAGS="-L/usr/local/lib -L${openssl_path}/lib"
        export CPPFLAGS="-I/usr/local/include -I${openssl_path}/include"

        cxx_flags="${cxx_flags} -I${openssl_path}/include"
        cxx_flags="${cxx_flags} -Wno-deprecated-declarations"
    fi

    cmake_flags="-DCMAKE_BUILD_TYPE=${CI_CONFIG}"
    if ! [ "${CI_FULL_TESTS}" == "1" ] ; then
        cmake_flags="${cmake_flags} -DFAST_TESTS_ONLY=ON"
    fi

    # Build and run unit tests
    . setup_env.sh
    mkdir -p build
    cd build
    cmake                                    \
        ${cmake_flags}                       \
        -DCMAKE_CXX_FLAGS="${cxx_flags}"     \
        ..

    # TODO: Uncomment the line above when the build is repaired
    # for now let's just run the tests in the CI
    #make -j 2 VERBOSE=1 all build_tests

    # Compile the project first (this will generate all grpc/proto files)
    # in Zeth. These are also used in the tests
    make -j 2
    # Compile and run the tests
    make -j 2 check
    cd ..

    if [ "${CI_INTEGRATION_TESTS}" == "1" ] ; then
        integration_tests
    fi
}

function ci_setup() {

    if [ "${platform}" == "Darwin" ] ; then
        # Some of these commands can fail (if packages are already installed,
        # etc), hence the `|| echo`.
        brew unlink python@2 || echo
    fi

    if [ "${platform}" == "Linux" ] ; then
        # `py3-virtualenv` depends on `python3`
        # which installs the latest version of python3
        # See: https://pkgs.alpinelinux.org/package/edge/main/x86/python3
        # https://build.alpinelinux.org/buildlogs/build-edge-x86/main/python3/python3-3.8.2-r6.log
        if (which apk) ; then
            apk add \
                py3-virtualenv \
                libffi-dev \
                python3-dev
        else
            sudo apt update
            sudo apt install python3-venv
        fi
    fi
}


ci_task=$1

echo ci_task = ${ci_task}
echo CI_CONFIG=${CI_CONFIG}
echo CI_ZKSNARK=${CI_ZKSNARK}
echo CI_FULL_TESTS=${CI_FULL_TESTS}
echo CI_CHECK_FORMAT=${CI_CHECK_FORMAT}
echo CI_INTEGRATION_TESTS=${CI_INTEGRATION_TESTS}

if [ "${CI_CHECK_FORMAT}" == "1" ] ; then
    check_format
fi

# Fallback to PGHR13 until we fully support Groth16
if [ "${CI_ZKSNARK}" == "" ] ; then
    CI_ZKSNARK="PGHR13"
fi

# The CI_USE_DOCKER variable determines whether we should
# re-execute the script in the docker container with CI_USE_DOCKER=0
if [ "${CI_USE_DOCKER}" == "1" ] ; then
    docker pull ghcr.io/clearmatics/zeth:latest-base
    docker build -f Dockerfile-zecale -t zecale-dev .
    docker run \
           -t \
           -p 50052:50052 \
           --name zecale \
           --env CI_CONFIG=${CI_CONFIG} \
           --env CI_ZKSNARK=${CI_ZKSNARK} \
           --env CI_FULL_TESTS=${CI_FULL_TESTS} \
           --env CI_INTEGRATION_TESTS=${CI_INTEGRATION_TESTS} \
           zecale-dev:latest $0 ${ci_task}
else
    ci_setup
    ${ci_task}
fi
